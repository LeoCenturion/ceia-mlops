services:
  rain-predictor:
    restart: always
    build: './service/'
    image: rain-predictor
    ports:
      - "5000:5000"
    networks:
      - cluster
    healthcheck:
      test: ["CMD", "python",  "./healthcheck.py"]
      interval: 1m30s
      timeout: 10s
      retries: 3
  postgres:
    restart: always
    build: './postgres'
    image: postgres_system
    container_name: postgres
    # profiles:
    #   - mlflow
    #   - all
    ports:
      - "${PG_PORT:-5433}:5433"
    networks:
      - cluster
    environment:
      - POSTGRES_USER=${PG_USER:-airflow}
      - POSTGRES_PASSWORD=${PG_PASSWORD:-airflow}
      - POSTGRES_DATABASE=${PG_DATABASE:-airflow}
      - PGPORT=5433
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-p", "5433", "-U", "${PG_USER:-airflow}"]
      interval: 60s
      timeout: 20s
      retries: 3
  s3:
    restart: always
    image: minio/minio:RELEASE.2025-04-03T14-56-28Z
    container_name: minio
    ports:
      - "${MINIO_PORT:-9000}:9000"
      - "${MINIO_PORT_UI:-9001}:9001"
    networks:
      - cluster
    environment:
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY:-minio}
      - MINIO_SECRET_KEY=${MINIO_SECRET_ACCESS_KEY:-minio123}
    volumes:
      - minio_data:/data
    command: server /data --console-address :9001
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 60s
      timeout: 20s
      retries: 3

  minio-bucket-init:
    image: minio/minio:RELEASE.2025-04-03T14-56-28Z
    depends_on:
      s3:
        condition: service_healthy
    networks:
      - cluster
    environment:
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY:-minio}
      - MINIO_SECRET_KEY=${MINIO_SECRET_ACCESS_KEY:-minio123}
    entrypoint: >
      /bin/sh -c "
      mc alias set local http://s3:${MINIO_PORT:-9000} $${MINIO_ACCESS_KEY} $${MINIO_SECRET_KEY};
      mc ls local/mlflow;
      if ! mc ls local/mlflow > /dev/null 2>&1; then
        mc mb local/mlflow;
      fi;
      "

  mlflow:
    restart: always
    build: "./mlflow"
    image: mlflow
    container_name: mlflow
    # profiles:
    #   - mlflow
    #   - all
    # depends_on:
    #   postgres:
    #     condition: service_healthy
    ports:
      - "${MLFLOW_PORT:-5000}:5001"
    networks:
      - cluster
    environment:
      - AWS_ACCESS_KEY_ID=${MINIO_ACCESS_KEY:-minio}
      - AWS_SECRET_ACCESS_KEY=${MINIO_SECRET_ACCESS_KEY:-minio123}
      - MLFLOW_S3_ENDPOINT_URL=http://s3:9000
    command: >
      mlflow server
      --backend-store-uri postgresql://${PG_USER:-airflow}:${PG_PASSWORD:-airflow}@postgres:5433/mlflow_db
      --host 0.0.0.0
      --port ${MLFLOW_PORT:-5000}
      --default-artifact-root s3://${MLFLOW_BUCKET_NAME:-mlflow}/
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://mlflow:${MLFLOW_PORT:-5000} || exit 1
      interval: 60s
      timeout: 10s
      retries: 3

networks:
  cluster:
    driver: bridge

volumes:
  db_data:
  minio_data:
